from glob import glob
import os
import platform
import shutil
import subprocess

class SnaphuError(Exception):
    pass

def load_conf_param_index(param: str, lines: list) -> int:
    """
    Get location of index containing specified parameter when loading
    param using f.readlines().

    Parameters
    ----------

    param: str
        Parameter to search for.
    lines: list
        List containing conf file read by using readlines() method.

    Returns
    -------
    int
        Index containing location of desired parameter in the input 
        list

    """
    # Load a tuple (i, param) where i is the index of param in the list
    line = [(i, x) for (i, x) in enumerate(lines) if param in x]
    if not line:
        raise SnaphuError(f'Parameter {param} not found in config file')
    # Get index
    return line[0][0]

def prep_snaphu(
    conf_file: str
    ) -> None:
    """
    Load and prepare the conf file for SNAPHU phase unwrapping.
    For tiled processing the user must specify the number of columns
    and rows using n_cols and n_rows respectively.

    This method also loads the relevant command used to run SNAPHU and
    sets the snaphu_cmd Class property.


    Parameters
    ----------
    conf_file: str
        Path of config file generated by SNAP SNAPHU export.
    
    Returns
    -------
    None

    """

    with open(conf_file, 'r') as f:
        lines = f.readlines()

    # Get indices of parameters
    i_log = load_conf_param_index('LOGFILE', lines)
    # i_corr = self._load_conf_param_index('CORRFILE', lines)
    # i_out = self._load_conf_param_index('OUTFILE', lines)
    
    # Set paths
    # First, comment out LOGFILE parameter
    # This supposedly creates an error when used with SNAPHU 1.4.2
    lines[i_log] = '# LOGFILE \t\tsnaphu.log\n'

    # Update file paths to use absolute path
    # Update command call and path
    command = lines[6]
    command_args = command.split()
    command = ' '.join(command_args)
    command = command.lstrip('#     ')
    command = command.rstrip('\n')

    with open(conf_file, 'w') as f:
        f.writelines(lines)

    # if platform.system() != 'Windows' and not self._snaphu_in_path:
    #     command = f'./{command}'

    # Update object properties
    # self._conf_lines = lines
    return command

def transfer_snaphu_files(src_dir: str, dst_dir: str) -> None:
    """
    Transfer coherence, phase, unwrapped phase, and conf files to and
    from the SNAPHU bin directory

    Parameters
    ----------
    src_dir: str
        Path of directory contaning SNAPHU files.
    dst_dir: bool
        Path of directory where SNAPHU files should be moved to.

    """
    # Get SNAPHU files
    coh_files = glob(os.path.join(src_dir, 'coh_*'))
    phase_files = glob(os.path.join(src_dir, 'Phase_ifg*'))
    unw_files = glob(os.path.join(src_dir, 'UnwPhase*'))
    conf_file = glob(os.path.join(src_dir, 'snaphu.conf'))
    files = coh_files + phase_files + unw_files + conf_file
    
    # Transfer files
    for file in files:
        dst = os.path.join(dst_dir, os.path.basename(file))
        print(f"INFO: Transferring file {file} to {dst}")
        shutil.move(src=file, dst=dst)

def run_snaphu(snaphu_target_dir: str, parameters: str):

    snaphu_target_data_dir = glob(os.path.join(snaphu_target_dir, '*'))
    if not snaphu_target_data_dir:
        raise RuntimeError("Cannot find Snaphu target data directory")
    snaphu_target_data_dir = snaphu_target_data_dir[0]
    
    if not parameters.get("binFolder"):
        raise ValueError("Missing binFolder parameter for SnaphuUnwrapping")
    
    cmd = prep_snaphu(os.path.join(snaphu_target_data_dir, "snaphu.conf"))
    cmd_list = cmd.split(' ')
    transfer_snaphu_files(snaphu_target_data_dir, parameters["binFolder"])
    use_shell = True if platform.system() == 'Windows' else False
    subprocess.call(cmd_list, cwd=parameters["binFolder"])
    transfer_snaphu_files(parameters["binFolder"], snaphu_target_data_dir)

    return

if __name__ == "__main__":
    pass
